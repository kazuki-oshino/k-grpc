// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PancakeBakerServiceClient is the client API for PancakeBakerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PancakeBakerServiceClient interface {
	Bake(ctx context.Context, in *BakeRequest, opts ...grpc.CallOption) (*BakeResponse, error)
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
	NotificationReport(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (PancakeBakerService_NotificationReportClient, error)
}

type pancakeBakerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPancakeBakerServiceClient(cc grpc.ClientConnInterface) PancakeBakerServiceClient {
	return &pancakeBakerServiceClient{cc}
}

func (c *pancakeBakerServiceClient) Bake(ctx context.Context, in *BakeRequest, opts ...grpc.CallOption) (*BakeResponse, error) {
	out := new(BakeResponse)
	err := c.cc.Invoke(ctx, "/pancake.maker.PancakeBakerService/Bake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pancakeBakerServiceClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/pancake.maker.PancakeBakerService/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pancakeBakerServiceClient) NotificationReport(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (PancakeBakerService_NotificationReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &PancakeBakerService_ServiceDesc.Streams[0], "/pancake.maker.PancakeBakerService/NotificationReport", opts...)
	if err != nil {
		return nil, err
	}
	x := &pancakeBakerServiceNotificationReportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PancakeBakerService_NotificationReportClient interface {
	Recv() (*NotificationResponse, error)
	grpc.ClientStream
}

type pancakeBakerServiceNotificationReportClient struct {
	grpc.ClientStream
}

func (x *pancakeBakerServiceNotificationReportClient) Recv() (*NotificationResponse, error) {
	m := new(NotificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PancakeBakerServiceServer is the server API for PancakeBakerService service.
// All implementations must embed UnimplementedPancakeBakerServiceServer
// for forward compatibility
type PancakeBakerServiceServer interface {
	Bake(context.Context, *BakeRequest) (*BakeResponse, error)
	Report(context.Context, *ReportRequest) (*ReportResponse, error)
	NotificationReport(*NotificationRequest, PancakeBakerService_NotificationReportServer) error
	mustEmbedUnimplementedPancakeBakerServiceServer()
}

// UnimplementedPancakeBakerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPancakeBakerServiceServer struct {
}

func (UnimplementedPancakeBakerServiceServer) Bake(context.Context, *BakeRequest) (*BakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bake not implemented")
}
func (UnimplementedPancakeBakerServiceServer) Report(context.Context, *ReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedPancakeBakerServiceServer) NotificationReport(*NotificationRequest, PancakeBakerService_NotificationReportServer) error {
	return status.Errorf(codes.Unimplemented, "method NotificationReport not implemented")
}
func (UnimplementedPancakeBakerServiceServer) mustEmbedUnimplementedPancakeBakerServiceServer() {}

// UnsafePancakeBakerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PancakeBakerServiceServer will
// result in compilation errors.
type UnsafePancakeBakerServiceServer interface {
	mustEmbedUnimplementedPancakeBakerServiceServer()
}

func RegisterPancakeBakerServiceServer(s grpc.ServiceRegistrar, srv PancakeBakerServiceServer) {
	s.RegisterService(&PancakeBakerService_ServiceDesc, srv)
}

func _PancakeBakerService_Bake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PancakeBakerServiceServer).Bake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pancake.maker.PancakeBakerService/Bake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PancakeBakerServiceServer).Bake(ctx, req.(*BakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PancakeBakerService_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PancakeBakerServiceServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pancake.maker.PancakeBakerService/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PancakeBakerServiceServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PancakeBakerService_NotificationReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PancakeBakerServiceServer).NotificationReport(m, &pancakeBakerServiceNotificationReportServer{stream})
}

type PancakeBakerService_NotificationReportServer interface {
	Send(*NotificationResponse) error
	grpc.ServerStream
}

type pancakeBakerServiceNotificationReportServer struct {
	grpc.ServerStream
}

func (x *pancakeBakerServiceNotificationReportServer) Send(m *NotificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PancakeBakerService_ServiceDesc is the grpc.ServiceDesc for PancakeBakerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PancakeBakerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pancake.maker.PancakeBakerService",
	HandlerType: (*PancakeBakerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bake",
			Handler:    _PancakeBakerService_Bake_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _PancakeBakerService_Report_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NotificationReport",
			Handler:       _PancakeBakerService_NotificationReport_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/pancake.proto",
}
